
// File Layout ----------------------------------/

sbw_Controller
-- Event handler, pushes and pulls data between other files

sbw_User
-- Stores user data ( Gonna need some help );

sbw_Lines
-- Selects line data and pushes stops

sbw_Times
-- pulls user defined preferences and pushes time data to controller for display

// Data prep -----------------------------/

// Line arrays containing stations
// User object with local commute preferences
// -- lines
// -- stations
// -- time paterns
// -- preferences

// ??? Alternate route eval?
// ??? Delay notifications?
// ??? Weather check pre-eval?
// -- Server crawls weather to see if detrimental elements are incoming, initiates more thurough checks if so.

// ??? NOTE How often do we need to update the stations overlay?



// Step 1 create objects ---------------------------------------/
// Assign station data to line arrays



// UI  ---------------------------------------/

// First Time User

// get lines
// -- select line.
// -- -- select station.
// -- -- -- assign timeframe to station selection.
// -- -- (?) select additional station.
// -- (?) select additional line





// Dead Code ------------------------/


// Get all the stops from all the lines
mta.stop().then(function (result) {
  let lineValue = Object.values(result);
  // object  values
  let allLines = Object.keys(result);
  // object keys
  let prev = 1;
  let res = ['1'];
  let currLine = [];
  // current line to be pushed to parent line
  for (let i = 0; i<allLines.length; i++) {
    // console.log(allLines[i][0]);
    if (prev != allLines[i][0]) {
      // If same name push to that name, else push to new name
      res.push(allLines[i][0]);
      prev = allLines[i][0];
      let LineID = new LineUp('line'+allLines[i-1][0]);
      LineID['stop'].push(currLine);
      console.log(LineID['stop'])
      lines.push(LineID);
      currLine = [];
      currLine.push(lineValue[i])
    } else {
      currLine.push(lineValue[i]);
    }

  }

  // console.log(res);
  console.log(lines);


}).catch(function (err) {
  console.log(err);
}).then(x=>{
  console.log('lines are done');
  for (let i=0;i<lines.length;i++){
    // loop through items in lines
    html += `<ul class='lineHolder'><h3 class='lineName'>${lines[i][0]['stop_id'][0]}</h3>`;
    for (let j=0;j<lines[i].length;j++) {
      // loop through a line's stops;
      html += `<li class='stopName'>${lines[i][j]['stop_name']}</li>`
      // console.log(lines[i][j]['stop_name']);
    }
    html += '</ul>'
  }
})
